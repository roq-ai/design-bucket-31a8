generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String   @db.VarChar(255)
  user_id    String   @db.Uuid
  design_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  design     design   @relation(fields: [design_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model design {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String    @db.VarChar(255)
  image      String    @db.VarChar(255)
  user_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  comment    comment[]
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  like       like[]
}

model follow {
  id                            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  follower_id                   String   @db.Uuid
  followed_id                   String   @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_follow_followed_idTouser user     @relation("follow_followed_idTouser", fields: [followed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_follower_idTouser user     @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model like {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  design_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  design     design   @relation(fields: [design_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String    @unique @db.VarChar(255)
  firstName                       String?   @db.VarChar(255)
  lastName                        String?   @db.VarChar(255)
  roq_user_id                     String    @db.VarChar(255)
  tenant_id                       String    @db.VarChar(255)
  created_at                      DateTime  @default(now()) @db.Timestamp(6)
  updated_at                      DateTime  @default(now()) @db.Timestamp(6)
  comment                         comment[]
  company                         company[]
  design                          design[]
  follow_follow_followed_idTouser follow[]  @relation("follow_followed_idTouser")
  follow_follow_follower_idTouser follow[]  @relation("follow_follower_idTouser")
  like                            like[]
}
